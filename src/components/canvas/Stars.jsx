import { useState, useRef, Suspense } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { Points, PointMaterial, Preload } from "@react-three/drei";
import * as random from "maath/random/dist/maath-random.esm";
// import { starPosX, starPosY } from "./starsPos";

const Stars = (props) => {
  const ref = useRef();
  const [sphere] = useState(() => random.inSphere(new Float32Array(2000), { radius: 1 }));

  useFrame((state, delta) => {
    ref.current.rotation.x -= delta / 70;
    ref.current.rotation.y -= delta / 75;
  });

  return (
    <group rotation={[0, Math.PI / 4, 0]}>
      <Points ref={ref} positions={sphere} stride={3} frustumCulled {...props}>
        <PointMaterial
          transparent
          color='#f272c8'
          size={0.003}
          sizeAttenuation={true}
          depthWrite={false}
        />
      </Points>
    </group>
  );
};

const StarsCanvas = () => {
  const starSizes = ['size-0.5', 'size-1', 'size-1.5', 'size-2', 'size-2.5'];
  const starPosX = [286,665,366,1069,432,724,489,35,343,26,633,907,688,831,1128,704,304,999,59,204,953,1111,56,759,917,403,854,622,333,54,51,669,96,535,1036,4,649,1073,599,790,400,443,861,196,1221,776,716,17,479,464,1131,600,181,654,488,849,122,268,760,235,1152,737,110,897,513,745,483,904,547,138,391,151,197,671,1153,615,397,1227,571,182,1041,887,190,1243,820,508,620,1211,1183,663,606,99,737,638,71,468,434,239,846,995,721,726,651,95,1136,765,1069,309,591,93,753,525,1211,515,40,361,649,1079,105,821,44,1050,80,215,367,781,308,1205,435,919,500,668,75,497,234,640,1146,990,1094,193,729,171,1021,632,331,597,405,712,59,464,498,322,21,252,96,904,91,128,981,235,999,292,312,252,602,1061,56,226,345,982,66,743,514,763,866,1070,593,626,456,1152,46,1150,712,913,1099,748,87,562,344,743,1156,155,970,1120,767,179,380,702,1085,918,664,742,626,860,1154,377,1103,905,564,574,931,804,972,1177,120,1233,0,3,639,215,756,684,349,1060,852,777,153,1230,1165,166,130,682,581,258,314,251,129,1090,272,211,386,909,604,492,700,386,1213,839,785,919,275,989,605,807,778,1239,253,904,994,869,271,404,970,1188,1145,295,988,169,49,1118,1046,507,723,99,275,72,676,18,128,1231,1113,1188,675,763,324,1196,793,1091,83,1098,932,547,341,639,1050,637,742,326,602,384,731,976,952,375,1241,801,14,266,567,395,186,1066,1033,1240,1233,885,8,512,827,570,321,81,1067,118,1040,963,426,66,212,265,768,260,1098,114,1092,983,805,1014,538,343,178,618,1083,366,1036,1208,588,905,1025,396,498,615,1100,801,1110,514,595,752,874,649,325,648,1078,120,1019,638,185,1237,225,1158,745,64,797,574,443,262,290,519,798,692,129,1006,761,1141,565,301,300,25,117,31,627,612,82,886,40,1010,41,773,966,689,1008,191,864,103,1113,1194,670,7,1119,489,468,1114,349,1146,1156,522,1220,970,984,828,475,714,1026,482,1016,590,574,832,695,1115,990,362,550,199,1096,531,1110,231,88,970,724,758,1160,10,1013,1124,564,1002,475,962,330,154,1209,438,795,577,903,851,602,644,1167,415,720,1005,979,1216,1017,437,43,115,63,1207,123,253,48,466,248,555,578,839,1154,812,539,341,211,270,1217,225,8]
  const starPosY = [942,862,1141,1232,957,1164,582,801,1124,249,854,1015,708,235,974,934,472,67,117,1139,1141,748,1033,393,339,671,90,976,412,645,545,478,378,1187,578,464,561,538,958,612,454,774,432,804,915,680,137,1013,521,1100,128,653,238,123,1125,1137,807,20,755,1163,730,853,563,1109,1159,725,81,2,825,457,709,285,1066,423,861,721,1053,892,125,629,566,833,99,814,442,1229,211,1075,1100,593,494,902,121,175,802,1105,969,818,1235,1086,1141,682,1116,278,181,798,531,127,355,592,680,1065,635,263,217,914,974,164,961,436,349,39,182,137,1000,1051,596,540,249,631,809,952,1036,818,418,308,410,63,806,1184,506,1040,992,32,1048,64,1017,1086,1169,1195,1021,20,598,756,523,132,815,272,64,781,698,91,194,1202,1071,890,947,9,1025,741,177,1241,222,347,640,1200,381,832,45,1138,1069,930,841,1027,1178,859,721,638,246,317,392,496,1230,146,643,400,1058,920,329,891,384,608,88,975,1088,574,866,248,521,202,700,928,299,133,808,547,715,768,781,439,439,883,1027,1222,382,1016,404,1228,730,492,103,1076,1116,379,1001,756,822,222,570,1003,347,766,524,490,1033,73,809,557,146,961,73,226,367,260,732,429,288,19,482,1120,25,736,1241,68,695,265,637,1157,785,1191,45,343,857,1112,144,165,1186,450,717,1055,84,240,36,0,232,148,1200,462,854,775,1217,217,309,683,855,910,973,402,670,1000,999,67,631,811,899,601,579,967,25,192,1092,713,1009,181,215,365,487,512,948,657,570,831,595,157,591,898,283,379,832,1027,93,402,43,694,971,1180,926,736,586,855,648,741,778,567,1063,870,149,1199,419,820,1042,1106,231,942,1243,1061,730,97,1039,711,446,621,1211,803,1202,1089,95,86,94,680,770,63,1159,221,1008,1156,277,744,272,404,593,971,415,730,985,247,1059,557,6,192,848,493,1218,1183,443,27,631,897,119,466,81,546,635,1157,874,1205,176,615,37,784,748,956,516,257,1063,1220,924,822,889,473,850,458,931,353,1044,855,150,326,56,219,815,306,708,314,910,566,944,578,8,582,280,158,453,848,74,234,38,573,424,665,89,597,673,139,450,836,946,104,664,650,249,967,1108,779,63,966,209,940,572,27,635,1106,871,270,802,487,1166,1061,864,264,745,822,524,881,706,242,851,1200]

  return (
    <>

    {/*
        <div 
    className="fixed top-0 left-0 w-screen h-screen -z-20 overflow-hidden"
    />
     {starPosX.slice(500,1000).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-1 absolute ${starSizes[randInt(0,1)]} bg-white/20 rounded-full`}/>
  
      ))}
      {starPosX.slice(500,1000).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-1-delayed absolute ${starSizes[randInt(0,1)]} bg-white/20 rounded-full`}/>
  
      ))}
      
         {starPosX.slice(1000, 1500).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index + 1000]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-2 absolute ${starSizes[randInt(1,3)]} bg-white/50 rounded-full`}/>
  
      ))}
      {starPosX.slice(1000, 1500).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index + 1000]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-2-delayed absolute ${starSizes[randInt(1,3)]} bg-white/50 rounded-full`}/>
  
      ))}
       {starPosX.slice(1800, 1900).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index + 1800]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-2 absolute ${starSizes[randInt(2,3)]} bg-white/70 rounded-full`}/>
  
      ))}
       {starPosX.slice(1900, 1950).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index + 1900]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-3 absolute ${starSizes[4]} bg-white/90 rounded-full`}/>
  
      ))}
      {starPosX.slice(1900, 1950).map((posX, index)=> (
      
      <div style={{left: (posX+2000), top: starPosY[index + 1900]}} key={`${posX}_${index}`}
        className={`animate-starsAnim-3-delayed absolute ${starSizes[4]} bg-white/90 rounded-full`}/>
  
      ))} 
     </div> */
 }
          <div className='w-screen h-screen fixed inset-0 -z-20'>
 
 <Canvas camera={{ position: [0, 0, 0] }}>
     <Suspense fallback={null}>
       <Stars />
     </Suspense>

     <Preload all />
  </Canvas> 
  </div>

    


 

    </>
    );
    
    
};

export default StarsCanvas;